[
    
    ,
    
    
    {
        "url": "/docs/security/data-source/doc/",
        "title": "At the data source",
        "content": "{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/security/search-endpoint/doc/",
        "title": "At the search endpoint",
        "content": "{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/getting-started/intro/doc/",
        "title": "Introduction",
        "content": ""
    }
    
    , 
    {
        "url": "/docs/use-exisitng-data/retrofit-a-data-explorer/doc/",
        "title": "Retrofit data explorers",
        "content": "{row-divider}\nMSSNG Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/use-exisitng-data/tables-in-a-bucket/doc/",
        "title": "Tables-in-a-bucket",
        "content": "{row-divider}\nPhenopackets example Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nKidsfirst FHIR example Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/use-exisitng-data/using-preso/doc/",
        "title": "Using Presto",
        "content": "{row-divider}\ndbGaP GECCO Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/getting-started/provision-data/doc/",
        "title": "Provision Data",
        "content": "{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/getting-started/consume-data/doc/",
        "title": "Consume Data",
        "content": "{row-divider}\nQueries The Search API supports query operation through SQL statements.\nThe GA4GH Search API’s SQL dialect has been selected for compatibility with current major open source database platforms including Presto SQL, PostgreSQL, and MySQL, as well as BigQuery. There are occasional name or signature differences, but a GA4GH Search API implementation atop any of the major database platforms should be able to pass through queries that use the functions listed below with only minor tweaks.\nSupported SQL functions\nSupported SQL grammar\n{divider}  Example #1 Example #2   This query returns all female patients from the patient table.\n/* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;   This query returns all conditions observed in female patients from the patient table.\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;    \n{row-divider}\nIssuing queries using the Search API Search is a standard REST API. This means Search can be access through standard HTTP calls.\nWhile Search API can be navigated using programs like cURL or Postman, it is best accessed programmatically, as every query will return immediately with a next page link that you need to continually \u0026lsquo;poll\u0026rsquo; by fetching the page at the link.\nOnce you\u0026rsquo;ve visited a page and consumed data from it, you can\u0026rsquo;t go back to it or refresh.\nOn the right, we provide examples to consume data from the Search API using the GA4GH Commandline Interface, the R client, Python, and cURL.\n Need help installing client libraries?\n {divider}  R Python CLI cURL   Follow Along in Google Colab\n# installing devtools dir.create(path = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), showWarnings = FALSE, recursive = TRUE) install.packages(\u0026#34;devtools\u0026#34;, lib = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), repos = \u0026#34;https://cran.rstudio.com/\u0026#34;) # installing the R client devtools::install_github(\u0026#34;DNAstack/ga4gh-search-client-r\u0026#34;) # Making the request library(httr) conditionsInFemalePatients \u0026lt;- ga4gh.search::ga4gh_search(\u0026#34;https://search-presto-public.staging.dnastack.com\u0026#34;, \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;)=\u0026#39;female\u0026#39; limit 5\u0026#34;) # View the results print(conditionsInFemalePatients) Output:\ndisease 1 Aortic atresia 2 Mitral atresia 3 Hypoplasia ascending aorta 4 Hypoplastic left heart syndrome 5 Hypoplastic left ventricle (subnormal cavity volume) identifier 1 Condition|SD_PREASA7S|272|Aortic atresia|None 2 Condition|SD_PREASA7S|272|Mitral atresia|None 3 Condition|SD_PREASA7S|272|Hypoplasia ascending aorta|None 4 Condition|SD_PREASA7S|272|Hypoplastic left heart syndrome|None 5 Condition|SD_PREASA7S|272|Hypoplastic left ventricle (subnormal cavity volume)|None   print \u0026#34;Not documented, yet\u0026#34;   ./dnastack-search query -q \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;)=\u0026#39;female\u0026#39; limit 5\u0026#34;   These requests This query returns all female patients from the patient table.\ncurl --request POST \\  --url https://search-presto-public.staging.dnastack.com/search \\  --header \u0026#39;content-type: application/json\u0026#39; \\  --data \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;select * from kidsfirst.ga4gh_tables.patient WHERE json_extract_scalar(patient, \u0026#39;\\\u0026#39;\u0026#39;$.gender\u0026#39;\\\u0026#39;\u0026#39;)=\u0026#39;\\\u0026#39;\u0026#39;female\u0026#39;\\\u0026#39;\u0026#39; limit 5\u0026#34;}\u0026#39; This query returns all conditions observed in female patients from the patient table.\ncurl --request POST \\  --url https://search-presto-public.staging.dnastack.com/search \\  --header \u0026#39;content-type: application/json\u0026#39; \\  --data \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.code.text\u0026#39;\\\u0026#39;\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.identifier[0].value\u0026#39;\\\u0026#39;\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.subject.reference\u0026#39;\\\u0026#39;\u0026#39;), \u0026#39;\\\u0026#39;\u0026#39;Patient/\u0026#39;\\\u0026#39;\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;\\\u0026#39;\u0026#39;$.gender\u0026#39;\\\u0026#39;\u0026#39;)=\u0026#39;\\\u0026#39;\u0026#39;female\u0026#39;\\\u0026#39;\u0026#39; limit 5\u0026#34;}\u0026#39;    \n"
    }
    
    , 
    {
        "url": "/docs/getting-started/upload-results/doc/",
        "title": "Upload results",
        "content": "{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"
    }
    
    , 
    {
        "url": "/docs/index.json",
        "title": "Docs",
        "content": ""
    }
    
]