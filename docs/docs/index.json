[{"url":"/docs/security/data-source/doc/","title":"At the data source","content":"{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"},{"url":"/docs/security/search-endpoint/doc/","title":"At the search endpoint","content":"{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"},{"url":"/docs/getting-started/intro/doc/","title":"Introduction","content":"{row-divider}\nThe GA4GH Search API The GA4GH Search API specification describes a simple, uniform mechanism to publish, discover, query, and analyze biomedical data. Any “rectangular” data that fits into rows and columns can be represented by GA4GH Search.\nSearch API for data custodians Search API is a perfect solution for data custodians looking to make their biomedical data discoverable and searchable.\n The API is minimalistic by design, which also means minimal resistance to adopt. Does not prescribe a particular data model. If it fits into rows and columns, you can publish it. Search serves as a general-purpose framework for building federatable search-based applications across multiple implementations. Search is backend agnostic. It is possible to implement the API across a large variety of backend datastores.  Search API for data consumers Search API is a perfect solution for data consumers looking to discover and search biomedical data in an interoperable way.\n Search API is RESTful. Read our Open API 3 specification. Search API is discoverable and browsable. See supported table operations Search API is queryable and familiar. Search API\u0026rsquo;s SQL dialect has a famililar interface insipired by current major open source database platforms.  {divider} Quick Links  Full API Specifications\nInstalling Client Libraries\nPlaceholder for custodian examples\nData Consumption Examples\n \n{row-divider}\nInstalling Client Libraries Search has client libraries for R and Python, as well as a command line interaface. We\u0026rsquo;ll be using these client libraries in the following examples. {divider}  Python R CLI   # Installing the client library form PyPi pip install search-python-client # Installing from Github pip install git+https://github.com/DNAstack/search-python-client --no-cache-dir   # Setup devtools dir.create(path = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), showWarnings = FALSE, recursive = TRUE) install.packages(\u0026#34;devtools\u0026#34;, lib = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), repos = \u0026#34;https://cran.rstudio.com/\u0026#34;) # installing the R client devtools::install_github(\u0026#34;DNAstack/ga4gh-search-client-r\u0026#34;)   Download tables-api-cli-executable.jar. Make it executable (e.g. chmod +x tables-api-cli-executable.jar)\nOptionally create an executable tables script, with contents like this:\n#!/bin/bash /path/to/tables-api-cli-executable.jar $@    \n"},{"url":"/docs/use-exisitng-data/retrofit-a-data-explorer/doc/","title":"Retrofit data explorers","content":"{row-divider}\nMSSNG Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n"},{"url":"/docs/use-exisitng-data/tables-in-a-bucket/doc/","title":"Tables-in-a-bucket","content":"{row-divider}\nPhenopackets example Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nKidsfirst FHIR example Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n"},{"url":"/docs/use-exisitng-data/using-preso/doc/","title":"Using Presto","content":"{row-divider}\ndbGaP GECCO Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n"},{"url":"/docs/getting-started/provision-data/doc/","title":"Provision Data","content":"{row-divider}\nImplementation The GA4GH API\n"},{"url":"/docs/getting-started/consume-data/doc/","title":"Consume Data","content":"{row-divider}\nQueries The Search API supports query operation through SQL statements.\nThe GA4GH Search API\u0026rsquo;s SQL dialect has a famililar interface insipired by current major open source database platforms including Presto SQL, PostgreSQL, and MySQL, as well as BigQuery. If you have prior experience with these database platforms, you\u0026rsquo;ll feel right at home with only minor adjustments.\nSupported SQL functions\nSupported SQL grammar\n{divider}  Example #1 Example #2   This query returns all female patients from the patient table.\n/* you can scroll on this tab */ SELECT * FROM kidsfirst.ga4gh_tables.patient WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;   This query returns all conditions observed in female patients from the patient table.\n/* you can scroll on this tab */ SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5;    \n{row-divider}\nIssuing queries using the Search API Search is a standard REST API. This means Search can be access through standard HTTP calls.\nWhile Search API can be navigated using programs like cURL or Postman, it is best accessed programmatically. The results could return multiple pages, which is easier to navigate with programmatic access.\nOnce you\u0026rsquo;ve visited a page and consumed data from it, you can\u0026rsquo;t go back to it or refresh.\nOn the right, we provide examples to consume data from the Search API using the GA4GH Commandline Interface, the R client, Python, and cURL.\n Need help installing client libraries?\n {divider}  Python R CLI cURL   Follow Along in Google Colab\n# Installing the client library form PyPi pip install search-python-client # Installing from Github pip install git+https://github.com/DNAstack/search-python-client --no-cache-dir # Building the query from search_python_client.search import DrsClient, SearchClient base_url = \u0026#39;https://search-presto-public.staging.dnastack.com\u0026#39; search_client = SearchClient(base_url=base_url) query = \u0026#34;\u0026#34;\u0026#34; SELECT Json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) AS disease, Json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) AS identifier FROM kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id = REPLACE(Json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE Json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;) = \u0026#39;female\u0026#39; LIMIT 5 \u0026#34;\u0026#34;\u0026#34; # Executing the query table_data_iterator = search_client.search_table(query) for item in table_data_iterator: print(item) # Results {\u0026#39;disease\u0026#39;: \u0026#39;Aortic atresia\u0026#39;, \u0026#39;identifier\u0026#39;: \u0026#39;Condition|SD_PREASA7S|272|Aortic atresia|None\u0026#39;} {\u0026#39;disease\u0026#39;: \u0026#39;Mitral atresia\u0026#39;, \u0026#39;identifier\u0026#39;: \u0026#39;Condition|SD_PREASA7S|272|Mitral atresia|None\u0026#39;} {\u0026#39;disease\u0026#39;: \u0026#39;Hypoplasia ascending aorta\u0026#39;, \u0026#39;identifier\u0026#39;: \u0026#39;Condition|SD_PREASA7S|272|Hypoplasia ascending aorta|None\u0026#39;} {\u0026#39;disease\u0026#39;: \u0026#39;Hypoplastic left heart syndrome\u0026#39;, \u0026#39;identifier\u0026#39;: \u0026#39;Condition|SD_PREASA7S|272|Hypoplastic left heart syndrome|None\u0026#39;} {\u0026#39;disease\u0026#39;: \u0026#39;Hypoplastic left ventricle (subnormal cavity volume)\u0026#39;, \u0026#39;identifier\u0026#39;: \u0026#39;Condition|SD_PREASA7S|272|Hypoplastic left ventricle (subnormal cavity volume)|None\u0026#39;}   Follow Along in Google Colab\n# installing devtools dir.create(path = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), showWarnings = FALSE, recursive = TRUE) install.packages(\u0026#34;devtools\u0026#34;, lib = Sys.getenv(\u0026#34;R_LIBS_USER\u0026#34;), repos = \u0026#34;https://cran.rstudio.com/\u0026#34;) # installing the R client devtools::install_github(\u0026#34;DNAstack/ga4gh-search-client-r\u0026#34;) # Making the request library(httr) conditionsInFemalePatients \u0026lt;- ga4gh.search::ga4gh_search(\u0026#34;https://search-presto-public.staging.dnastack.com\u0026#34;, \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;)=\u0026#39;female\u0026#39; limit 5\u0026#34;) # View the results print(conditionsInFemalePatients) Output:\ndisease 1 Aortic atresia 2 Mitral atresia 3 Hypoplasia ascending aorta 4 Hypoplastic left heart syndrome 5 Hypoplastic left ventricle (subnormal cavity volume) identifier 1 Condition|SD_PREASA7S|272|Aortic atresia|None 2 Condition|SD_PREASA7S|272|Mitral atresia|None 3 Condition|SD_PREASA7S|272|Hypoplasia ascending aorta|None 4 Condition|SD_PREASA7S|272|Hypoplastic left heart syndrome|None 5 Condition|SD_PREASA7S|272|Hypoplastic left ventricle (subnormal cavity volume)|None   ./dnastack-search query -q \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;$.code.text\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;$.identifier[0].value\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;$.subject.reference\u0026#39;), \u0026#39;Patient/\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;$.gender\u0026#39;)=\u0026#39;female\u0026#39; limit 5\u0026#34;   These requests This query returns all female patients from the patient table.\ncurl --request POST \\  --url https://search-presto-public.staging.dnastack.com/search \\  --header \u0026#39;content-type: application/json\u0026#39; \\  --data \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;select * from kidsfirst.ga4gh_tables.patient WHERE json_extract_scalar(patient, \u0026#39;\\\u0026#39;\u0026#39;$.gender\u0026#39;\\\u0026#39;\u0026#39;)=\u0026#39;\\\u0026#39;\u0026#39;female\u0026#39;\\\u0026#39;\u0026#39; limit 5\u0026#34;}\u0026#39; This query returns all conditions observed in female patients from the patient table.\ncurl --request POST \\  --url https://search-presto-public.staging.dnastack.com/search \\  --header \u0026#39;content-type: application/json\u0026#39; \\  --data \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;select json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.code.text\u0026#39;\\\u0026#39;\u0026#39;) as disease, json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.identifier[0].value\u0026#39;\\\u0026#39;\u0026#39;) as identifier from kidsfirst.ga4gh_tables.ncpi_disease disease INNER JOIN kidsfirst.ga4gh_tables.patient patient ON patient.id=replace(json_extract_scalar(ncpi_disease, \u0026#39;\\\u0026#39;\u0026#39;$.subject.reference\u0026#39;\\\u0026#39;\u0026#39;), \u0026#39;\\\u0026#39;\u0026#39;Patient/\u0026#39;\\\u0026#39;\u0026#39;) WHERE json_extract_scalar(patient, \u0026#39;\\\u0026#39;\u0026#39;$.gender\u0026#39;\\\u0026#39;\u0026#39;)=\u0026#39;\\\u0026#39;\u0026#39;female\u0026#39;\\\u0026#39;\u0026#39; limit 5\u0026#34;}\u0026#39;    \n"},{"url":"/docs/getting-started/upload-results/doc/","title":"Upload results","content":"{row-divider}\nContent structure Clyde focuses on good, readable, responsive documentation. It\u0026rsquo;s side bar indexes in only 2 levels. It\u0026rsquo;s opinionated, because deeply nested manuals are hard to follow and takes much too long to navigate.\n{divider}  Files     ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category |     The code snippet is pulled from this page\n{row-divider}\nSidebar category indexing Clyde indexes the first level of the sidebar manu by looking for type: product.\nBy default, we use feather icons, and the icon renders as specified by icon: \u0026quot;icon-layers\u0026quot;\nThe example provided is consistent with this example project.\n{divider}  Meta     ---title:\u0026#34;Getting Started\u0026#34;icon:\u0026#34;icon-layers\u0026#34;type :\u0026#34;product\u0026#34;---    The code snippet is pulled from this page\n{row-divider}\nSidebar sub-category indexing Clyde indexes the second level of the sidebar manu by looking for type: docs.\nThe layout: two-col specifies the layout of the document.\nThere is also the layout: single-col for a single column layout.\nThe ordering of the menu items can be found from weight: 1\n{divider}  Meta     ---title:\u0026#34;Directory Structure\u0026#34;weight:1draft:falselastmod:2020-11-5# search related keywordstype:docslayout:two-col---    The code snippet is pulled from this page\n"},{"url":"/docs/index.json","title":"Docs","content":""}]